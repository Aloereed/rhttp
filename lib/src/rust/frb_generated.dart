// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/http.dart';
import 'api/http_types.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiInitInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.1.0';

  @override
  int get rustContentHash => -1359568954;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rhttp',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<HttpResponse> crateApiHttpMakeHttpRequest(
      {required HttpVersionPref httpVersion,
      required HttpMethod method,
      required String url,
      List<(String, String)>? query,
      HttpHeaders? headers,
      HttpBody? body,
      required HttpExpectBody expectBody});

  Stream<Uint8List> crateApiHttpMakeHttpRequestReceiveStream(
      {required HttpVersionPref httpVersion,
      required HttpMethod method,
      required String url,
      List<(String, String)>? query,
      HttpHeaders? headers,
      HttpBody? body,
      required FutureOr<void> Function(HttpResponse) onResponse});

  Future<void> crateApiInitInitApp();

  String crateApiSimpleGreet({required String name});

  Stream<int> crateApiSimpleTick();
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<HttpResponse> crateApiHttpMakeHttpRequest(
      {required HttpVersionPref httpVersion,
      required HttpMethod method,
      required String url,
      List<(String, String)>? query,
      HttpHeaders? headers,
      HttpBody? body,
      required HttpExpectBody expectBody}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_http_version_pref(httpVersion, serializer);
        sse_encode_http_method(method, serializer);
        sse_encode_String(url, serializer);
        sse_encode_opt_list_record_string_string(query, serializer);
        sse_encode_opt_box_autoadd_http_headers(headers, serializer);
        sse_encode_opt_box_autoadd_http_body(body, serializer);
        sse_encode_http_expect_body(expectBody, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_http_response,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiHttpMakeHttpRequestConstMeta,
      argValues: [httpVersion, method, url, query, headers, body, expectBody],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiHttpMakeHttpRequestConstMeta =>
      const TaskConstMeta(
        debugName: "make_http_request",
        argNames: [
          "httpVersion",
          "method",
          "url",
          "query",
          "headers",
          "body",
          "expectBody"
        ],
      );

  @override
  Stream<Uint8List> crateApiHttpMakeHttpRequestReceiveStream(
      {required HttpVersionPref httpVersion,
      required HttpMethod method,
      required String url,
      List<(String, String)>? query,
      HttpHeaders? headers,
      HttpBody? body,
      required FutureOr<void> Function(HttpResponse) onResponse}) {
    final streamSink = RustStreamSink<Uint8List>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_http_version_pref(httpVersion, serializer);
        sse_encode_http_method(method, serializer);
        sse_encode_String(url, serializer);
        sse_encode_opt_list_record_string_string(query, serializer);
        sse_encode_opt_box_autoadd_http_headers(headers, serializer);
        sse_encode_opt_box_autoadd_http_body(body, serializer);
        sse_encode_StreamSink_list_prim_u_8_strict_Sse(streamSink, serializer);
        sse_encode_DartFn_Inputs_http_response_Output_unit_AnyhowException(
            onResponse, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiHttpMakeHttpRequestReceiveStreamConstMeta,
      argValues: [
        httpVersion,
        method,
        url,
        query,
        headers,
        body,
        streamSink,
        onResponse
      ],
      apiImpl: this,
    )));
    return streamSink.stream;
  }

  TaskConstMeta get kCrateApiHttpMakeHttpRequestReceiveStreamConstMeta =>
      const TaskConstMeta(
        debugName: "make_http_request_receive_stream",
        argNames: [
          "httpVersion",
          "method",
          "url",
          "query",
          "headers",
          "body",
          "streamSink",
          "onResponse"
        ],
      );

  @override
  Future<void> crateApiInitInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiInitInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Stream<int> crateApiSimpleTick() {
    final sink = RustStreamSink<int>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_i_32_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleTickConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiSimpleTickConstMeta => const TaskConstMeta(
        debugName: "tick",
        argNames: ["sink"],
      );

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_http_response_Output_unit_AnyhowException(
          FutureOr<void> Function(HttpResponse) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_http_response(rawArg0);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  FutureOr<void> Function(HttpResponse)
      dco_decode_DartFn_Inputs_http_response_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<HttpHeaderName, String> dco_decode_Map_http_header_name_String(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_http_header_name_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  RustStreamSink<int> dco_decode_StreamSink_i_32_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<Uint8List> dco_decode_StreamSink_list_prim_u_8_strict_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  HttpBody dco_decode_box_autoadd_http_body(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_http_body(raw);
  }

  @protected
  HttpHeaders dco_decode_box_autoadd_http_headers(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_http_headers(raw);
  }

  @protected
  HttpBody dco_decode_http_body(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return HttpBody_Text(
          dco_decode_String(raw[1]),
        );
      case 1:
        return HttpBody_Bytes(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 2:
        return HttpBody_Form(
          dco_decode_Map_String_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  HttpExpectBody dco_decode_http_expect_body(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HttpExpectBody.values[raw as int];
  }

  @protected
  HttpHeaderName dco_decode_http_header_name(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HttpHeaderName.values[raw as int];
  }

  @protected
  HttpHeaders dco_decode_http_headers(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return HttpHeaders_Map(
          dco_decode_Map_http_header_name_String(raw[1]),
        );
      case 1:
        return HttpHeaders_RawMap(
          dco_decode_Map_String_String(raw[1]),
        );
      case 2:
        return HttpHeaders_List(
          dco_decode_list_record_string_string(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  HttpMethod dco_decode_http_method(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HttpMethod.values[raw as int];
  }

  @protected
  HttpResponse dco_decode_http_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return HttpResponse(
      headers: dco_decode_list_record_string_string(arr[0]),
      version: dco_decode_http_version(arr[1]),
      statusCode: dco_decode_u_16(arr[2]),
      body: dco_decode_http_response_body(arr[3]),
    );
  }

  @protected
  HttpResponseBody dco_decode_http_response_body(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return HttpResponseBody_Text(
          dco_decode_String(raw[1]),
        );
      case 1:
        return HttpResponseBody_Bytes(
          dco_decode_list_prim_u_8_strict(raw[1]),
        );
      case 2:
        return HttpResponseBody_Stream();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  HttpVersion dco_decode_http_version(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HttpVersion.values[raw as int];
  }

  @protected
  HttpVersionPref dco_decode_http_version_pref(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HttpVersionPref.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(HttpHeaderName, String)> dco_decode_list_record_http_header_name_string(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_http_header_name_string)
        .toList();
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  HttpBody? dco_decode_opt_box_autoadd_http_body(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_http_body(raw);
  }

  @protected
  HttpHeaders? dco_decode_opt_box_autoadd_http_headers(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_http_headers(raw);
  }

  @protected
  List<(String, String)>? dco_decode_opt_list_record_string_string(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_record_string_string(raw);
  }

  @protected
  (HttpHeaderName, String) dco_decode_record_http_header_name_string(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_http_header_name(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  Map<String, String> sse_decode_Map_String_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<HttpHeaderName, String> sse_decode_Map_http_header_name_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_http_header_name_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  RustStreamSink<int> sse_decode_StreamSink_i_32_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<Uint8List> sse_decode_StreamSink_list_prim_u_8_strict_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  HttpBody sse_decode_box_autoadd_http_body(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_http_body(deserializer));
  }

  @protected
  HttpHeaders sse_decode_box_autoadd_http_headers(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_http_headers(deserializer));
  }

  @protected
  HttpBody sse_decode_http_body(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return HttpBody_Text(var_field0);
      case 1:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return HttpBody_Bytes(var_field0);
      case 2:
        var var_field0 = sse_decode_Map_String_String(deserializer);
        return HttpBody_Form(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  HttpExpectBody sse_decode_http_expect_body(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return HttpExpectBody.values[inner];
  }

  @protected
  HttpHeaderName sse_decode_http_header_name(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return HttpHeaderName.values[inner];
  }

  @protected
  HttpHeaders sse_decode_http_headers(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_Map_http_header_name_String(deserializer);
        return HttpHeaders_Map(var_field0);
      case 1:
        var var_field0 = sse_decode_Map_String_String(deserializer);
        return HttpHeaders_RawMap(var_field0);
      case 2:
        var var_field0 = sse_decode_list_record_string_string(deserializer);
        return HttpHeaders_List(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  HttpMethod sse_decode_http_method(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return HttpMethod.values[inner];
  }

  @protected
  HttpResponse sse_decode_http_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_headers = sse_decode_list_record_string_string(deserializer);
    var var_version = sse_decode_http_version(deserializer);
    var var_statusCode = sse_decode_u_16(deserializer);
    var var_body = sse_decode_http_response_body(deserializer);
    return HttpResponse(
        headers: var_headers,
        version: var_version,
        statusCode: var_statusCode,
        body: var_body);
  }

  @protected
  HttpResponseBody sse_decode_http_response_body(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return HttpResponseBody_Text(var_field0);
      case 1:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return HttpResponseBody_Bytes(var_field0);
      case 2:
        return HttpResponseBody_Stream();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  HttpVersion sse_decode_http_version(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return HttpVersion.values[inner];
  }

  @protected
  HttpVersionPref sse_decode_http_version_pref(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return HttpVersionPref.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(HttpHeaderName, String)> sse_decode_list_record_http_header_name_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(HttpHeaderName, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_http_header_name_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  HttpBody? sse_decode_opt_box_autoadd_http_body(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_http_body(deserializer));
    } else {
      return null;
    }
  }

  @protected
  HttpHeaders? sse_decode_opt_box_autoadd_http_headers(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_http_headers(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<(String, String)>? sse_decode_opt_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_record_string_string(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (HttpHeaderName, String) sse_decode_record_http_header_name_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_http_header_name(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_http_response_Output_unit_AnyhowException(
      FutureOr<void> Function(HttpResponse) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_http_response_Output_unit_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        BigInt.from(PlatformPointerUtil.ptrToInt(encodeDartOpaque(
                self, portManager.dartHandlerPort, generalizedFrbRustBinding)))
            .toUnsigned(64),
        serializer);
  }

  @protected
  void sse_encode_Map_String_String(
      Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_http_header_name_String(
      Map<HttpHeaderName, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_http_header_name_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_StreamSink_i_32_Sse(
      RustStreamSink<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_i_32,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_list_prim_u_8_strict_Sse(
      RustStreamSink<Uint8List> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_box_autoadd_http_body(
      HttpBody self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_http_body(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_http_headers(
      HttpHeaders self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_http_headers(self, serializer);
  }

  @protected
  void sse_encode_http_body(HttpBody self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case HttpBody_Text(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case HttpBody_Bytes(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case HttpBody_Form(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_Map_String_String(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_http_expect_body(
      HttpExpectBody self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_http_header_name(
      HttpHeaderName self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_http_headers(HttpHeaders self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case HttpHeaders_Map(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_Map_http_header_name_String(field0, serializer);
      case HttpHeaders_RawMap(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_Map_String_String(field0, serializer);
      case HttpHeaders_List(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_list_record_string_string(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_http_method(HttpMethod self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_http_response(HttpResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(self.headers, serializer);
    sse_encode_http_version(self.version, serializer);
    sse_encode_u_16(self.statusCode, serializer);
    sse_encode_http_response_body(self.body, serializer);
  }

  @protected
  void sse_encode_http_response_body(
      HttpResponseBody self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case HttpResponseBody_Text(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case HttpResponseBody_Bytes(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case HttpResponseBody_Stream():
        sse_encode_i_32(2, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_http_version(HttpVersion self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_http_version_pref(
      HttpVersionPref self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_http_header_name_string(
      List<(HttpHeaderName, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_http_header_name_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_http_body(
      HttpBody? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_http_body(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_http_headers(
      HttpHeaders? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_http_headers(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_record_string_string(
      List<(String, String)>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_record_string_string(self, serializer);
    }
  }

  @protected
  void sse_encode_record_http_header_name_string(
      (HttpHeaderName, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_http_header_name(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}
