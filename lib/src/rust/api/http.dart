// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'http_types.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'http.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `to_method`

Future<HttpResponse> makeHttpRequest(
        {required HttpVersionPref httpVersion,
        required HttpMethod method,
        required String url,
        List<(String, String)>? query,
        HttpHeaders? headers,
        HttpBody? body,
        required HttpExpectBody expectBody}) =>
    RustLib.instance.api.crateApiHttpMakeHttpRequest(
        httpVersion: httpVersion,
        method: method,
        url: url,
        query: query,
        headers: headers,
        body: body,
        expectBody: expectBody);

@freezed
sealed class HttpBody with _$HttpBody {
  const HttpBody._();

  const factory HttpBody.text(
    String field0,
  ) = HttpBody_Text;
  const factory HttpBody.bytes(
    Uint8List field0,
  ) = HttpBody_Bytes;
  const factory HttpBody.form(
    Map<String, String> field0,
  ) = HttpBody_Form;
}

enum HttpExpectBody {
  text,
  bytes,
  stream,
  ;
}

@freezed
sealed class HttpHeaders with _$HttpHeaders {
  const HttpHeaders._();

  const factory HttpHeaders.map(
    Map<HttpHeaderName, String> field0,
  ) = HttpHeaders_Map;
  const factory HttpHeaders.rawMap(
    Map<String, String> field0,
  ) = HttpHeaders_RawMap;
}

enum HttpMethod {
  options,
  get_,
  post,
  put,
  delete,
  head,
  trace,
  connect,
  patch,
  ;
}

class HttpResponse {
  final List<(String, String)> headers;
  final HttpVersion version;
  final int statusCode;
  final HttpResponseBody body;

  const HttpResponse({
    required this.headers,
    required this.version,
    required this.statusCode,
    required this.body,
  });

  @override
  int get hashCode =>
      headers.hashCode ^ version.hashCode ^ statusCode.hashCode ^ body.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is HttpResponse &&
          runtimeType == other.runtimeType &&
          headers == other.headers &&
          version == other.version &&
          statusCode == other.statusCode &&
          body == other.body;
}

@freezed
sealed class HttpResponseBody with _$HttpResponseBody {
  const HttpResponseBody._();

  const factory HttpResponseBody.text(
    String field0,
  ) = HttpResponseBody_Text;
  const factory HttpResponseBody.bytes(
    Uint8List field0,
  ) = HttpResponseBody_Bytes;
  const factory HttpResponseBody.stream() = HttpResponseBody_Stream;
}

enum HttpVersion {
  http09,
  http10,
  http11,
  http2,
  http3,
  other,
  ;
}

enum HttpVersionPref {
  http1,
  http2,
  http3,
  all,
  ;
}
