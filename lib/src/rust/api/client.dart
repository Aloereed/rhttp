// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'http.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `create_client`, `new_default`, `new`
// These types are ignored because they are not used by any `pub` functions: `RequestClient`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`

class ClientSettings {
  final HttpVersionPref httpVersionPref;
  final Duration? timeout;
  final Duration? connectTimeout;
  final bool throwOnStatusCode;
  final TlsSettings? tlsSettings;

  const ClientSettings({
    required this.httpVersionPref,
    this.timeout,
    this.connectTimeout,
    required this.throwOnStatusCode,
    this.tlsSettings,
  });

  static Future<ClientSettings> default_() =>
      RustLib.instance.api.crateApiClientClientSettingsDefault();

  @override
  int get hashCode =>
      httpVersionPref.hashCode ^
      timeout.hashCode ^
      connectTimeout.hashCode ^
      throwOnStatusCode.hashCode ^
      tlsSettings.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ClientSettings &&
          runtimeType == other.runtimeType &&
          httpVersionPref == other.httpVersionPref &&
          timeout == other.timeout &&
          connectTimeout == other.connectTimeout &&
          throwOnStatusCode == other.throwOnStatusCode &&
          tlsSettings == other.tlsSettings;
}

class TlsSettings {
  final bool trustRootCertificates;
  final List<Uint8List> trustedRootCertificates;
  final bool verifyCertificates;
  final TlsVersion? minTlsVersion;
  final TlsVersion? maxTlsVersion;

  const TlsSettings({
    required this.trustRootCertificates,
    required this.trustedRootCertificates,
    required this.verifyCertificates,
    this.minTlsVersion,
    this.maxTlsVersion,
  });

  @override
  int get hashCode =>
      trustRootCertificates.hashCode ^
      trustedRootCertificates.hashCode ^
      verifyCertificates.hashCode ^
      minTlsVersion.hashCode ^
      maxTlsVersion.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TlsSettings &&
          runtimeType == other.runtimeType &&
          trustRootCertificates == other.trustRootCertificates &&
          trustedRootCertificates == other.trustedRootCertificates &&
          verifyCertificates == other.verifyCertificates &&
          minTlsVersion == other.minTlsVersion &&
          maxTlsVersion == other.maxTlsVersion;
}

enum TlsVersion {
  tls12,
  tls13,
  ;
}
