// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.1.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -1154344864;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__client__client_settings_default_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "client_settings_default",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok =
                        Result::<_, ()>::Ok(crate::api::client::ClientSettings::default())?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__http__cancel_request_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "cancel_request",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_address = <i64>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::http::cancel_request(api_address);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__http__make_http_request_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "make_http_request",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_client_address = <Option<i64>>::sse_decode(&mut deserializer);
            let api_settings =
                <Option<crate::api::client::ClientSettings>>::sse_decode(&mut deserializer);
            let api_method = <crate::api::http::HttpMethod>::sse_decode(&mut deserializer);
            let api_url = <String>::sse_decode(&mut deserializer);
            let api_query = <Option<Vec<(String, String)>>>::sse_decode(&mut deserializer);
            let api_headers =
                <Option<crate::api::http::HttpHeaders>>::sse_decode(&mut deserializer);
            let api_body = <Option<crate::api::http::HttpBody>>::sse_decode(&mut deserializer);
            let api_expect_body = <crate::api::http::HttpExpectBody>::sse_decode(&mut deserializer);
            let api_on_cancel_token = decode_DartFn_Inputs_i_64_Output_unit_AnyhowException(
                <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer),
            );
            let api_cancelable = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::api::error::RhttpError>(
                    (move || async move {
                        let output_ok = crate::api::http::make_http_request(
                            api_client_address,
                            api_settings,
                            api_method,
                            api_url,
                            api_query,
                            api_headers,
                            api_body,
                            api_expect_body,
                            api_on_cancel_token,
                            api_cancelable,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__http__make_http_request_receive_stream_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "make_http_request_receive_stream",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_client_address = <Option<i64>>::sse_decode(&mut deserializer);
            let api_settings =
                <Option<crate::api::client::ClientSettings>>::sse_decode(&mut deserializer);
            let api_method = <crate::api::http::HttpMethod>::sse_decode(&mut deserializer);
            let api_url = <String>::sse_decode(&mut deserializer);
            let api_query = <Option<Vec<(String, String)>>>::sse_decode(&mut deserializer);
            let api_headers =
                <Option<crate::api::http::HttpHeaders>>::sse_decode(&mut deserializer);
            let api_body = <Option<crate::api::http::HttpBody>>::sse_decode(&mut deserializer);
            let api_stream_sink =
                <StreamSink<Vec<u8>, flutter_rust_bridge::for_generated::SseCodec>>::sse_decode(
                    &mut deserializer,
                );
            let api_on_response = decode_DartFn_Inputs_http_response_Output_unit_AnyhowException(
                <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer),
            );
            let api_on_cancel_token = decode_DartFn_Inputs_i_64_Output_unit_AnyhowException(
                <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer),
            );
            let api_cancelable = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, crate::api::error::RhttpError>(
                    (move || async move {
                        let output_ok = crate::api::http::make_http_request_receive_stream(
                            api_client_address,
                            api_settings,
                            api_method,
                            api_url,
                            api_query,
                            api_headers,
                            api_body,
                            api_stream_sink,
                            api_on_response,
                            api_on_cancel_token,
                            api_cancelable,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__http__register_client_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "register_client",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_settings = <crate::api::client::ClientSettings>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, crate::api::error::RhttpError>((move || {
                    let output_ok = crate::api::http::register_client(api_settings)?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__http__remove_client_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "remove_client",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_address = <i64>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::http::remove_client(api_address);
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__init__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::init::init_app();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}

// Section: related_funcs

fn decode_DartFn_Inputs_http_response_Output_unit_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(crate::api::http::HttpResponse) -> flutter_rust_bridge::DartFnFuture<()> {
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: crate::api::http::HttpResponse,
    ) -> () {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<()>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: crate::api::http::HttpResponse| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
fn decode_DartFn_Inputs_i_64_Output_unit_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(i64) -> flutter_rust_bridge::DartFnFuture<()> {
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque, arg0: i64) -> () {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<()>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: i64| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for chrono::Duration {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i64>::sse_decode(deserializer);
        return chrono::Duration::microseconds(inner);
    }
}

impl SseDecode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_dart_opaque(inner) };
    }
}

impl SseDecode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, String)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<crate::api::http_types::HttpHeaderName, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<(crate::api::http_types::HttpHeaderName, String)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for StreamSink<Vec<u8>, flutter_rust_bridge::for_generated::SseCodec> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::client::ClientSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_httpVersionPref = <crate::api::http::HttpVersionPref>::sse_decode(deserializer);
        let mut var_timeout = <Option<chrono::Duration>>::sse_decode(deserializer);
        let mut var_connectTimeout = <Option<chrono::Duration>>::sse_decode(deserializer);
        let mut var_throwOnStatusCode = <bool>::sse_decode(deserializer);
        let mut var_tlsSettings =
            <Option<crate::api::client::TlsSettings>>::sse_decode(deserializer);
        return crate::api::client::ClientSettings {
            http_version_pref: var_httpVersionPref,
            timeout: var_timeout,
            connect_timeout: var_connectTimeout,
            throw_on_status_code: var_throwOnStatusCode,
            tls_settings: var_tlsSettings,
        };
    }
}

impl SseDecode for crate::api::http::HttpBody {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::http::HttpBody::Text(var_field0);
            }
            1 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::http::HttpBody::Bytes(var_field0);
            }
            2 => {
                let mut var_field0 =
                    <std::collections::HashMap<String, String>>::sse_decode(deserializer);
                return crate::api::http::HttpBody::Form(var_field0);
            }
            3 => {
                let mut var_field0 = <crate::api::http::MultipartPayload>::sse_decode(deserializer);
                return crate::api::http::HttpBody::Multipart(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::http::HttpExpectBody {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::http::HttpExpectBody::Text,
            1 => crate::api::http::HttpExpectBody::Bytes,
            _ => unreachable!("Invalid variant for HttpExpectBody: {}", inner),
        };
    }
}

impl SseDecode for crate::api::http_types::HttpHeaderName {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::http_types::HttpHeaderName::Accept,
            1 => crate::api::http_types::HttpHeaderName::AcceptCharset,
            2 => crate::api::http_types::HttpHeaderName::AcceptEncoding,
            3 => crate::api::http_types::HttpHeaderName::AcceptLanguage,
            4 => crate::api::http_types::HttpHeaderName::AcceptRanges,
            5 => crate::api::http_types::HttpHeaderName::AccessControlAllowCredentials,
            6 => crate::api::http_types::HttpHeaderName::AccessControlAllowHeaders,
            7 => crate::api::http_types::HttpHeaderName::AccessControlAllowMethods,
            8 => crate::api::http_types::HttpHeaderName::AccessControlAllowOrigin,
            9 => crate::api::http_types::HttpHeaderName::AccessControlExposeHeaders,
            10 => crate::api::http_types::HttpHeaderName::AccessControlMaxAge,
            11 => crate::api::http_types::HttpHeaderName::AccessControlRequestHeaders,
            12 => crate::api::http_types::HttpHeaderName::AccessControlRequestMethod,
            13 => crate::api::http_types::HttpHeaderName::Age,
            14 => crate::api::http_types::HttpHeaderName::Allow,
            15 => crate::api::http_types::HttpHeaderName::AltSvc,
            16 => crate::api::http_types::HttpHeaderName::Authorization,
            17 => crate::api::http_types::HttpHeaderName::CacheControl,
            18 => crate::api::http_types::HttpHeaderName::CacheStatus,
            19 => crate::api::http_types::HttpHeaderName::CdnCacheControl,
            20 => crate::api::http_types::HttpHeaderName::Connection,
            21 => crate::api::http_types::HttpHeaderName::ContentDisposition,
            22 => crate::api::http_types::HttpHeaderName::ContentEncoding,
            23 => crate::api::http_types::HttpHeaderName::ContentLanguage,
            24 => crate::api::http_types::HttpHeaderName::ContentLength,
            25 => crate::api::http_types::HttpHeaderName::ContentLocation,
            26 => crate::api::http_types::HttpHeaderName::ContentRange,
            27 => crate::api::http_types::HttpHeaderName::ContentSecurityPolicy,
            28 => crate::api::http_types::HttpHeaderName::ContentSecurityPolicyReportOnly,
            29 => crate::api::http_types::HttpHeaderName::ContentType,
            30 => crate::api::http_types::HttpHeaderName::Cookie,
            31 => crate::api::http_types::HttpHeaderName::Dnt,
            32 => crate::api::http_types::HttpHeaderName::Date,
            33 => crate::api::http_types::HttpHeaderName::Etag,
            34 => crate::api::http_types::HttpHeaderName::Expect,
            35 => crate::api::http_types::HttpHeaderName::Expires,
            36 => crate::api::http_types::HttpHeaderName::Forwarded,
            37 => crate::api::http_types::HttpHeaderName::From,
            38 => crate::api::http_types::HttpHeaderName::Host,
            39 => crate::api::http_types::HttpHeaderName::IfMatch,
            40 => crate::api::http_types::HttpHeaderName::IfModifiedSince,
            41 => crate::api::http_types::HttpHeaderName::IfNoneMatch,
            42 => crate::api::http_types::HttpHeaderName::IfRange,
            43 => crate::api::http_types::HttpHeaderName::IfUnmodifiedSince,
            44 => crate::api::http_types::HttpHeaderName::LastModified,
            45 => crate::api::http_types::HttpHeaderName::Link,
            46 => crate::api::http_types::HttpHeaderName::Location,
            47 => crate::api::http_types::HttpHeaderName::MaxForwards,
            48 => crate::api::http_types::HttpHeaderName::Origin,
            49 => crate::api::http_types::HttpHeaderName::Pragma,
            50 => crate::api::http_types::HttpHeaderName::ProxyAuthenticate,
            51 => crate::api::http_types::HttpHeaderName::ProxyAuthorization,
            52 => crate::api::http_types::HttpHeaderName::PublicKeyPins,
            53 => crate::api::http_types::HttpHeaderName::PublicKeyPinsReportOnly,
            54 => crate::api::http_types::HttpHeaderName::Range,
            55 => crate::api::http_types::HttpHeaderName::Referer,
            56 => crate::api::http_types::HttpHeaderName::ReferrerPolicy,
            57 => crate::api::http_types::HttpHeaderName::Refresh,
            58 => crate::api::http_types::HttpHeaderName::RetryAfter,
            59 => crate::api::http_types::HttpHeaderName::SecWebSocketAccept,
            60 => crate::api::http_types::HttpHeaderName::SecWebSocketExtensions,
            61 => crate::api::http_types::HttpHeaderName::SecWebSocketKey,
            62 => crate::api::http_types::HttpHeaderName::SecWebSocketProtocol,
            63 => crate::api::http_types::HttpHeaderName::SecWebSocketVersion,
            64 => crate::api::http_types::HttpHeaderName::Server,
            65 => crate::api::http_types::HttpHeaderName::SetCookie,
            66 => crate::api::http_types::HttpHeaderName::StrictTransportSecurity,
            67 => crate::api::http_types::HttpHeaderName::Te,
            68 => crate::api::http_types::HttpHeaderName::Trailer,
            69 => crate::api::http_types::HttpHeaderName::TransferEncoding,
            70 => crate::api::http_types::HttpHeaderName::UserAgent,
            71 => crate::api::http_types::HttpHeaderName::Upgrade,
            72 => crate::api::http_types::HttpHeaderName::UpgradeInsecureRequests,
            73 => crate::api::http_types::HttpHeaderName::Vary,
            74 => crate::api::http_types::HttpHeaderName::Via,
            75 => crate::api::http_types::HttpHeaderName::Warning,
            76 => crate::api::http_types::HttpHeaderName::WwwAuthenticate,
            77 => crate::api::http_types::HttpHeaderName::XContentTypeOptions,
            78 => crate::api::http_types::HttpHeaderName::XDnsPrefetchControl,
            79 => crate::api::http_types::HttpHeaderName::XFrameOptions,
            80 => crate::api::http_types::HttpHeaderName::XXssProtection,
            _ => unreachable!("Invalid variant for HttpHeaderName: {}", inner),
        };
    }
}

impl SseDecode for crate::api::http::HttpHeaders {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <std::collections::HashMap<
                    crate::api::http_types::HttpHeaderName,
                    String,
                >>::sse_decode(deserializer);
                return crate::api::http::HttpHeaders::Map(var_field0);
            }
            1 => {
                let mut var_field0 =
                    <std::collections::HashMap<String, String>>::sse_decode(deserializer);
                return crate::api::http::HttpHeaders::RawMap(var_field0);
            }
            2 => {
                let mut var_field0 = <Vec<(String, String)>>::sse_decode(deserializer);
                return crate::api::http::HttpHeaders::List(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::http::HttpMethod {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::http::HttpMethod::Options,
            1 => crate::api::http::HttpMethod::Get,
            2 => crate::api::http::HttpMethod::Post,
            3 => crate::api::http::HttpMethod::Put,
            4 => crate::api::http::HttpMethod::Delete,
            5 => crate::api::http::HttpMethod::Head,
            6 => crate::api::http::HttpMethod::Trace,
            7 => crate::api::http::HttpMethod::Connect,
            8 => crate::api::http::HttpMethod::Patch,
            _ => unreachable!("Invalid variant for HttpMethod: {}", inner),
        };
    }
}

impl SseDecode for crate::api::http::HttpResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_headers = <Vec<(String, String)>>::sse_decode(deserializer);
        let mut var_version = <crate::api::http::HttpVersion>::sse_decode(deserializer);
        let mut var_statusCode = <u16>::sse_decode(deserializer);
        let mut var_body = <crate::api::http::HttpResponseBody>::sse_decode(deserializer);
        return crate::api::http::HttpResponse {
            headers: var_headers,
            version: var_version,
            status_code: var_statusCode,
            body: var_body,
        };
    }
}

impl SseDecode for crate::api::http::HttpResponseBody {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::http::HttpResponseBody::Text(var_field0);
            }
            1 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::http::HttpResponseBody::Bytes(var_field0);
            }
            2 => {
                return crate::api::http::HttpResponseBody::Stream;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::http::HttpVersion {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::http::HttpVersion::Http09,
            1 => crate::api::http::HttpVersion::Http10,
            2 => crate::api::http::HttpVersion::Http11,
            3 => crate::api::http::HttpVersion::Http2,
            4 => crate::api::http::HttpVersion::Http3,
            5 => crate::api::http::HttpVersion::Other,
            _ => unreachable!("Invalid variant for HttpVersion: {}", inner),
        };
    }
}

impl SseDecode for crate::api::http::HttpVersionPref {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::http::HttpVersionPref::Http10,
            1 => crate::api::http::HttpVersionPref::Http11,
            2 => crate::api::http::HttpVersionPref::Http2,
            3 => crate::api::http::HttpVersionPref::Http3,
            4 => crate::api::http::HttpVersionPref::All,
            _ => unreachable!("Invalid variant for HttpVersionPref: {}", inner),
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(crate::api::http_types::HttpHeaderName, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(crate::api::http_types::HttpHeaderName, String)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, crate::api::http::MultipartItem)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, crate::api::http::MultipartItem)>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, String)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::http::MultipartItem {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <crate::api::http::MultipartValue>::sse_decode(deserializer);
        let mut var_fileName = <Option<String>>::sse_decode(deserializer);
        let mut var_contentType = <Option<String>>::sse_decode(deserializer);
        return crate::api::http::MultipartItem {
            value: var_value,
            file_name: var_fileName,
            content_type: var_contentType,
        };
    }
}

impl SseDecode for crate::api::http::MultipartPayload {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_parts =
            <Vec<(String, crate::api::http::MultipartItem)>>::sse_decode(deserializer);
        return crate::api::http::MultipartPayload { parts: var_parts };
    }
}

impl SseDecode for crate::api::http::MultipartValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::http::MultipartValue::Text(var_field0);
            }
            1 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::http::MultipartValue::Bytes(var_field0);
            }
            2 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::http::MultipartValue::File(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<chrono::Duration> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<chrono::Duration>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::client::ClientSettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::client::ClientSettings>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::http::HttpBody> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::http::HttpBody>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::http::HttpHeaders> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::http::HttpHeaders>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::client::TlsSettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::client::TlsSettings>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::client::TlsVersion> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::client::TlsVersion>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<(String, String)>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<(String, String)>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for (crate::api::http_types::HttpHeaderName, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <crate::api::http_types::HttpHeaderName>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, crate::api::http::MultipartItem) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::http::MultipartItem>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for crate::api::error::RhttpError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::RhttpError::RhttpCancelError(var_field0);
            }
            1 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::RhttpError::RhttpTimeoutError(var_field0);
            }
            2 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                let mut var_field1 = <u16>::sse_decode(deserializer);
                let mut var_field2 = <Vec<(String, String)>>::sse_decode(deserializer);
                let mut var_field3 = <crate::api::http::HttpResponseBody>::sse_decode(deserializer);
                return crate::api::error::RhttpError::RhttpStatusCodeError(
                    var_field0, var_field1, var_field2, var_field3,
                );
            }
            3 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                let mut var_field1 = <String>::sse_decode(deserializer);
                return crate::api::error::RhttpError::RhttpInvalidCertificateError(
                    var_field0, var_field1,
                );
            }
            4 => {
                return crate::api::error::RhttpError::RhttpInvalidClientError;
            }
            5 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::error::RhttpError::RhttpUnknownError(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::client::TlsSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_verifyCertificates = <bool>::sse_decode(deserializer);
        let mut var_minTlsVersion =
            <Option<crate::api::client::TlsVersion>>::sse_decode(deserializer);
        let mut var_maxTlsVersion =
            <Option<crate::api::client::TlsVersion>>::sse_decode(deserializer);
        return crate::api::client::TlsSettings {
            verify_certificates: var_verifyCertificates,
            min_tls_version: var_minTlsVersion,
            max_tls_version: var_maxTlsVersion,
        };
    }
}

impl SseDecode for crate::api::client::TlsVersion {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::client::TlsVersion::Tls1_2,
            1 => crate::api::client::TlsVersion::Tls1_3,
            _ => unreachable!("Invalid variant for TlsVersion: {}", inner),
        };
    }
}

impl SseDecode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__client__client_settings_default_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        2 => wire__crate__api__http__cancel_request_impl(port, ptr, rust_vec_len, data_len),
        3 => wire__crate__api__http__make_http_request_impl(port, ptr, rust_vec_len, data_len),
        4 => wire__crate__api__http__make_http_request_receive_stream_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        5 => wire__crate__api__http__register_client_impl(port, ptr, rust_vec_len, data_len),
        6 => wire__crate__api__http__remove_client_impl(port, ptr, rust_vec_len, data_len),
        7 => wire__crate__api__init__init_app_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::client::ClientSettings {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.http_version_pref.into_into_dart().into_dart(),
            self.timeout.into_into_dart().into_dart(),
            self.connect_timeout.into_into_dart().into_dart(),
            self.throw_on_status_code.into_into_dart().into_dart(),
            self.tls_settings.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::client::ClientSettings
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::client::ClientSettings>
    for crate::api::client::ClientSettings
{
    fn into_into_dart(self) -> crate::api::client::ClientSettings {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::HttpBody {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::http::HttpBody::Text(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::http::HttpBody::Bytes(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::http::HttpBody::Form(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::http::HttpBody::Multipart(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::http::HttpBody {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::HttpBody> for crate::api::http::HttpBody {
    fn into_into_dart(self) -> crate::api::http::HttpBody {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::HttpExpectBody {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Text => 0.into_dart(),
            Self::Bytes => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::HttpExpectBody
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::HttpExpectBody>
    for crate::api::http::HttpExpectBody
{
    fn into_into_dart(self) -> crate::api::http::HttpExpectBody {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http_types::HttpHeaderName {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Accept => 0.into_dart(),
            Self::AcceptCharset => 1.into_dart(),
            Self::AcceptEncoding => 2.into_dart(),
            Self::AcceptLanguage => 3.into_dart(),
            Self::AcceptRanges => 4.into_dart(),
            Self::AccessControlAllowCredentials => 5.into_dart(),
            Self::AccessControlAllowHeaders => 6.into_dart(),
            Self::AccessControlAllowMethods => 7.into_dart(),
            Self::AccessControlAllowOrigin => 8.into_dart(),
            Self::AccessControlExposeHeaders => 9.into_dart(),
            Self::AccessControlMaxAge => 10.into_dart(),
            Self::AccessControlRequestHeaders => 11.into_dart(),
            Self::AccessControlRequestMethod => 12.into_dart(),
            Self::Age => 13.into_dart(),
            Self::Allow => 14.into_dart(),
            Self::AltSvc => 15.into_dart(),
            Self::Authorization => 16.into_dart(),
            Self::CacheControl => 17.into_dart(),
            Self::CacheStatus => 18.into_dart(),
            Self::CdnCacheControl => 19.into_dart(),
            Self::Connection => 20.into_dart(),
            Self::ContentDisposition => 21.into_dart(),
            Self::ContentEncoding => 22.into_dart(),
            Self::ContentLanguage => 23.into_dart(),
            Self::ContentLength => 24.into_dart(),
            Self::ContentLocation => 25.into_dart(),
            Self::ContentRange => 26.into_dart(),
            Self::ContentSecurityPolicy => 27.into_dart(),
            Self::ContentSecurityPolicyReportOnly => 28.into_dart(),
            Self::ContentType => 29.into_dart(),
            Self::Cookie => 30.into_dart(),
            Self::Dnt => 31.into_dart(),
            Self::Date => 32.into_dart(),
            Self::Etag => 33.into_dart(),
            Self::Expect => 34.into_dart(),
            Self::Expires => 35.into_dart(),
            Self::Forwarded => 36.into_dart(),
            Self::From => 37.into_dart(),
            Self::Host => 38.into_dart(),
            Self::IfMatch => 39.into_dart(),
            Self::IfModifiedSince => 40.into_dart(),
            Self::IfNoneMatch => 41.into_dart(),
            Self::IfRange => 42.into_dart(),
            Self::IfUnmodifiedSince => 43.into_dart(),
            Self::LastModified => 44.into_dart(),
            Self::Link => 45.into_dart(),
            Self::Location => 46.into_dart(),
            Self::MaxForwards => 47.into_dart(),
            Self::Origin => 48.into_dart(),
            Self::Pragma => 49.into_dart(),
            Self::ProxyAuthenticate => 50.into_dart(),
            Self::ProxyAuthorization => 51.into_dart(),
            Self::PublicKeyPins => 52.into_dart(),
            Self::PublicKeyPinsReportOnly => 53.into_dart(),
            Self::Range => 54.into_dart(),
            Self::Referer => 55.into_dart(),
            Self::ReferrerPolicy => 56.into_dart(),
            Self::Refresh => 57.into_dart(),
            Self::RetryAfter => 58.into_dart(),
            Self::SecWebSocketAccept => 59.into_dart(),
            Self::SecWebSocketExtensions => 60.into_dart(),
            Self::SecWebSocketKey => 61.into_dart(),
            Self::SecWebSocketProtocol => 62.into_dart(),
            Self::SecWebSocketVersion => 63.into_dart(),
            Self::Server => 64.into_dart(),
            Self::SetCookie => 65.into_dart(),
            Self::StrictTransportSecurity => 66.into_dart(),
            Self::Te => 67.into_dart(),
            Self::Trailer => 68.into_dart(),
            Self::TransferEncoding => 69.into_dart(),
            Self::UserAgent => 70.into_dart(),
            Self::Upgrade => 71.into_dart(),
            Self::UpgradeInsecureRequests => 72.into_dart(),
            Self::Vary => 73.into_dart(),
            Self::Via => 74.into_dart(),
            Self::Warning => 75.into_dart(),
            Self::WwwAuthenticate => 76.into_dart(),
            Self::XContentTypeOptions => 77.into_dart(),
            Self::XDnsPrefetchControl => 78.into_dart(),
            Self::XFrameOptions => 79.into_dart(),
            Self::XXssProtection => 80.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http_types::HttpHeaderName
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http_types::HttpHeaderName>
    for crate::api::http_types::HttpHeaderName
{
    fn into_into_dart(self) -> crate::api::http_types::HttpHeaderName {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::HttpHeaders {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::http::HttpHeaders::Map(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::http::HttpHeaders::RawMap(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::http::HttpHeaders::List(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::http::HttpHeaders {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::HttpHeaders>
    for crate::api::http::HttpHeaders
{
    fn into_into_dart(self) -> crate::api::http::HttpHeaders {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::HttpMethod {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Options => 0.into_dart(),
            Self::Get => 1.into_dart(),
            Self::Post => 2.into_dart(),
            Self::Put => 3.into_dart(),
            Self::Delete => 4.into_dart(),
            Self::Head => 5.into_dart(),
            Self::Trace => 6.into_dart(),
            Self::Connect => 7.into_dart(),
            Self::Patch => 8.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::http::HttpMethod {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::HttpMethod>
    for crate::api::http::HttpMethod
{
    fn into_into_dart(self) -> crate::api::http::HttpMethod {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::HttpResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.headers.into_into_dart().into_dart(),
            self.version.into_into_dart().into_dart(),
            self.status_code.into_into_dart().into_dart(),
            self.body.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::HttpResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::HttpResponse>
    for crate::api::http::HttpResponse
{
    fn into_into_dart(self) -> crate::api::http::HttpResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::HttpResponseBody {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::http::HttpResponseBody::Text(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::http::HttpResponseBody::Bytes(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::http::HttpResponseBody::Stream => [2.into_dart()].into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::HttpResponseBody
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::HttpResponseBody>
    for crate::api::http::HttpResponseBody
{
    fn into_into_dart(self) -> crate::api::http::HttpResponseBody {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::HttpVersion {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Http09 => 0.into_dart(),
            Self::Http10 => 1.into_dart(),
            Self::Http11 => 2.into_dart(),
            Self::Http2 => 3.into_dart(),
            Self::Http3 => 4.into_dart(),
            Self::Other => 5.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::http::HttpVersion {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::HttpVersion>
    for crate::api::http::HttpVersion
{
    fn into_into_dart(self) -> crate::api::http::HttpVersion {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::HttpVersionPref {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Http10 => 0.into_dart(),
            Self::Http11 => 1.into_dart(),
            Self::Http2 => 2.into_dart(),
            Self::Http3 => 3.into_dart(),
            Self::All => 4.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::HttpVersionPref
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::HttpVersionPref>
    for crate::api::http::HttpVersionPref
{
    fn into_into_dart(self) -> crate::api::http::HttpVersionPref {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::MultipartItem {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.value.into_into_dart().into_dart(),
            self.file_name.into_into_dart().into_dart(),
            self.content_type.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::MultipartItem
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::MultipartItem>
    for crate::api::http::MultipartItem
{
    fn into_into_dart(self) -> crate::api::http::MultipartItem {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::MultipartPayload {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.parts.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::MultipartPayload
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::MultipartPayload>
    for crate::api::http::MultipartPayload
{
    fn into_into_dart(self) -> crate::api::http::MultipartPayload {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::http::MultipartValue {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::http::MultipartValue::Text(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::http::MultipartValue::Bytes(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::http::MultipartValue::File(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::http::MultipartValue
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::http::MultipartValue>
    for crate::api::http::MultipartValue
{
    fn into_into_dart(self) -> crate::api::http::MultipartValue {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::error::RhttpError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::error::RhttpError::RhttpCancelError(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::RhttpError::RhttpTimeoutError(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::error::RhttpError::RhttpStatusCodeError(field0, field1, field2, field3) => {
                [
                    2.into_dart(),
                    field0.into_into_dart().into_dart(),
                    field1.into_into_dart().into_dart(),
                    field2.into_into_dart().into_dart(),
                    field3.into_into_dart().into_dart(),
                ]
                .into_dart()
            }
            crate::api::error::RhttpError::RhttpInvalidCertificateError(field0, field1) => [
                3.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::error::RhttpError::RhttpInvalidClientError => [4.into_dart()].into_dart(),
            crate::api::error::RhttpError::RhttpUnknownError(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::error::RhttpError {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::error::RhttpError>
    for crate::api::error::RhttpError
{
    fn into_into_dart(self) -> crate::api::error::RhttpError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::client::TlsSettings {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.verify_certificates.into_into_dart().into_dart(),
            self.min_tls_version.into_into_dart().into_dart(),
            self.max_tls_version.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::client::TlsSettings
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::client::TlsSettings>
    for crate::api::client::TlsSettings
{
    fn into_into_dart(self) -> crate::api::client::TlsSettings {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::client::TlsVersion {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Tls1_2 => 0.into_dart(),
            Self::Tls1_3 => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::client::TlsVersion
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::client::TlsVersion>
    for crate::api::client::TlsVersion
{
    fn into_into_dart(self) -> crate::api::client::TlsVersion {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for chrono::Duration {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(
            self.num_microseconds()
                .expect("cannot get microseconds from time"),
            serializer,
        );
    }
}

impl SseEncode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.encode(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, String)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<crate::api::http_types::HttpHeaderName, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(crate::api::http_types::HttpHeaderName, String)>>::sse_encode(
            self.into_iter().collect(),
            serializer,
        );
    }
}

impl SseEncode for StreamSink<Vec<u8>, flutter_rust_bridge::for_generated::SseCodec> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::client::ClientSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::http::HttpVersionPref>::sse_encode(self.http_version_pref, serializer);
        <Option<chrono::Duration>>::sse_encode(self.timeout, serializer);
        <Option<chrono::Duration>>::sse_encode(self.connect_timeout, serializer);
        <bool>::sse_encode(self.throw_on_status_code, serializer);
        <Option<crate::api::client::TlsSettings>>::sse_encode(self.tls_settings, serializer);
    }
}

impl SseEncode for crate::api::http::HttpBody {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::http::HttpBody::Text(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::http::HttpBody::Bytes(field0) => {
                <i32>::sse_encode(1, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::http::HttpBody::Form(field0) => {
                <i32>::sse_encode(2, serializer);
                <std::collections::HashMap<String, String>>::sse_encode(field0, serializer);
            }
            crate::api::http::HttpBody::Multipart(field0) => {
                <i32>::sse_encode(3, serializer);
                <crate::api::http::MultipartPayload>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::http::HttpExpectBody {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::http::HttpExpectBody::Text => 0,
                crate::api::http::HttpExpectBody::Bytes => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::http_types::HttpHeaderName {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::http_types::HttpHeaderName::Accept => 0,
                crate::api::http_types::HttpHeaderName::AcceptCharset => 1,
                crate::api::http_types::HttpHeaderName::AcceptEncoding => 2,
                crate::api::http_types::HttpHeaderName::AcceptLanguage => 3,
                crate::api::http_types::HttpHeaderName::AcceptRanges => 4,
                crate::api::http_types::HttpHeaderName::AccessControlAllowCredentials => 5,
                crate::api::http_types::HttpHeaderName::AccessControlAllowHeaders => 6,
                crate::api::http_types::HttpHeaderName::AccessControlAllowMethods => 7,
                crate::api::http_types::HttpHeaderName::AccessControlAllowOrigin => 8,
                crate::api::http_types::HttpHeaderName::AccessControlExposeHeaders => 9,
                crate::api::http_types::HttpHeaderName::AccessControlMaxAge => 10,
                crate::api::http_types::HttpHeaderName::AccessControlRequestHeaders => 11,
                crate::api::http_types::HttpHeaderName::AccessControlRequestMethod => 12,
                crate::api::http_types::HttpHeaderName::Age => 13,
                crate::api::http_types::HttpHeaderName::Allow => 14,
                crate::api::http_types::HttpHeaderName::AltSvc => 15,
                crate::api::http_types::HttpHeaderName::Authorization => 16,
                crate::api::http_types::HttpHeaderName::CacheControl => 17,
                crate::api::http_types::HttpHeaderName::CacheStatus => 18,
                crate::api::http_types::HttpHeaderName::CdnCacheControl => 19,
                crate::api::http_types::HttpHeaderName::Connection => 20,
                crate::api::http_types::HttpHeaderName::ContentDisposition => 21,
                crate::api::http_types::HttpHeaderName::ContentEncoding => 22,
                crate::api::http_types::HttpHeaderName::ContentLanguage => 23,
                crate::api::http_types::HttpHeaderName::ContentLength => 24,
                crate::api::http_types::HttpHeaderName::ContentLocation => 25,
                crate::api::http_types::HttpHeaderName::ContentRange => 26,
                crate::api::http_types::HttpHeaderName::ContentSecurityPolicy => 27,
                crate::api::http_types::HttpHeaderName::ContentSecurityPolicyReportOnly => 28,
                crate::api::http_types::HttpHeaderName::ContentType => 29,
                crate::api::http_types::HttpHeaderName::Cookie => 30,
                crate::api::http_types::HttpHeaderName::Dnt => 31,
                crate::api::http_types::HttpHeaderName::Date => 32,
                crate::api::http_types::HttpHeaderName::Etag => 33,
                crate::api::http_types::HttpHeaderName::Expect => 34,
                crate::api::http_types::HttpHeaderName::Expires => 35,
                crate::api::http_types::HttpHeaderName::Forwarded => 36,
                crate::api::http_types::HttpHeaderName::From => 37,
                crate::api::http_types::HttpHeaderName::Host => 38,
                crate::api::http_types::HttpHeaderName::IfMatch => 39,
                crate::api::http_types::HttpHeaderName::IfModifiedSince => 40,
                crate::api::http_types::HttpHeaderName::IfNoneMatch => 41,
                crate::api::http_types::HttpHeaderName::IfRange => 42,
                crate::api::http_types::HttpHeaderName::IfUnmodifiedSince => 43,
                crate::api::http_types::HttpHeaderName::LastModified => 44,
                crate::api::http_types::HttpHeaderName::Link => 45,
                crate::api::http_types::HttpHeaderName::Location => 46,
                crate::api::http_types::HttpHeaderName::MaxForwards => 47,
                crate::api::http_types::HttpHeaderName::Origin => 48,
                crate::api::http_types::HttpHeaderName::Pragma => 49,
                crate::api::http_types::HttpHeaderName::ProxyAuthenticate => 50,
                crate::api::http_types::HttpHeaderName::ProxyAuthorization => 51,
                crate::api::http_types::HttpHeaderName::PublicKeyPins => 52,
                crate::api::http_types::HttpHeaderName::PublicKeyPinsReportOnly => 53,
                crate::api::http_types::HttpHeaderName::Range => 54,
                crate::api::http_types::HttpHeaderName::Referer => 55,
                crate::api::http_types::HttpHeaderName::ReferrerPolicy => 56,
                crate::api::http_types::HttpHeaderName::Refresh => 57,
                crate::api::http_types::HttpHeaderName::RetryAfter => 58,
                crate::api::http_types::HttpHeaderName::SecWebSocketAccept => 59,
                crate::api::http_types::HttpHeaderName::SecWebSocketExtensions => 60,
                crate::api::http_types::HttpHeaderName::SecWebSocketKey => 61,
                crate::api::http_types::HttpHeaderName::SecWebSocketProtocol => 62,
                crate::api::http_types::HttpHeaderName::SecWebSocketVersion => 63,
                crate::api::http_types::HttpHeaderName::Server => 64,
                crate::api::http_types::HttpHeaderName::SetCookie => 65,
                crate::api::http_types::HttpHeaderName::StrictTransportSecurity => 66,
                crate::api::http_types::HttpHeaderName::Te => 67,
                crate::api::http_types::HttpHeaderName::Trailer => 68,
                crate::api::http_types::HttpHeaderName::TransferEncoding => 69,
                crate::api::http_types::HttpHeaderName::UserAgent => 70,
                crate::api::http_types::HttpHeaderName::Upgrade => 71,
                crate::api::http_types::HttpHeaderName::UpgradeInsecureRequests => 72,
                crate::api::http_types::HttpHeaderName::Vary => 73,
                crate::api::http_types::HttpHeaderName::Via => 74,
                crate::api::http_types::HttpHeaderName::Warning => 75,
                crate::api::http_types::HttpHeaderName::WwwAuthenticate => 76,
                crate::api::http_types::HttpHeaderName::XContentTypeOptions => 77,
                crate::api::http_types::HttpHeaderName::XDnsPrefetchControl => 78,
                crate::api::http_types::HttpHeaderName::XFrameOptions => 79,
                crate::api::http_types::HttpHeaderName::XXssProtection => 80,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::http::HttpHeaders {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::http::HttpHeaders::Map(field0) => {
                <i32>::sse_encode(0, serializer);
                <std::collections::HashMap<crate::api::http_types::HttpHeaderName, String>>::sse_encode(field0, serializer);
            }
            crate::api::http::HttpHeaders::RawMap(field0) => {
                <i32>::sse_encode(1, serializer);
                <std::collections::HashMap<String, String>>::sse_encode(field0, serializer);
            }
            crate::api::http::HttpHeaders::List(field0) => {
                <i32>::sse_encode(2, serializer);
                <Vec<(String, String)>>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::http::HttpMethod {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::http::HttpMethod::Options => 0,
                crate::api::http::HttpMethod::Get => 1,
                crate::api::http::HttpMethod::Post => 2,
                crate::api::http::HttpMethod::Put => 3,
                crate::api::http::HttpMethod::Delete => 4,
                crate::api::http::HttpMethod::Head => 5,
                crate::api::http::HttpMethod::Trace => 6,
                crate::api::http::HttpMethod::Connect => 7,
                crate::api::http::HttpMethod::Patch => 8,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::http::HttpResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, String)>>::sse_encode(self.headers, serializer);
        <crate::api::http::HttpVersion>::sse_encode(self.version, serializer);
        <u16>::sse_encode(self.status_code, serializer);
        <crate::api::http::HttpResponseBody>::sse_encode(self.body, serializer);
    }
}

impl SseEncode for crate::api::http::HttpResponseBody {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::http::HttpResponseBody::Text(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::http::HttpResponseBody::Bytes(field0) => {
                <i32>::sse_encode(1, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::http::HttpResponseBody::Stream => {
                <i32>::sse_encode(2, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::http::HttpVersion {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::http::HttpVersion::Http09 => 0,
                crate::api::http::HttpVersion::Http10 => 1,
                crate::api::http::HttpVersion::Http11 => 2,
                crate::api::http::HttpVersion::Http2 => 3,
                crate::api::http::HttpVersion::Http3 => 4,
                crate::api::http::HttpVersion::Other => 5,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::http::HttpVersionPref {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::http::HttpVersionPref::Http10 => 0,
                crate::api::http::HttpVersionPref::Http11 => 1,
                crate::api::http::HttpVersionPref::Http2 => 2,
                crate::api::http::HttpVersionPref::Http3 => 3,
                crate::api::http::HttpVersionPref::All => 4,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(crate::api::http_types::HttpHeaderName, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(crate::api::http_types::HttpHeaderName, String)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, crate::api::http::MultipartItem)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, crate::api::http::MultipartItem)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, String)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::http::MultipartItem {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::http::MultipartValue>::sse_encode(self.value, serializer);
        <Option<String>>::sse_encode(self.file_name, serializer);
        <Option<String>>::sse_encode(self.content_type, serializer);
    }
}

impl SseEncode for crate::api::http::MultipartPayload {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, crate::api::http::MultipartItem)>>::sse_encode(self.parts, serializer);
    }
}

impl SseEncode for crate::api::http::MultipartValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::http::MultipartValue::Text(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::http::MultipartValue::Bytes(field0) => {
                <i32>::sse_encode(1, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::http::MultipartValue::File(field0) => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<chrono::Duration> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <chrono::Duration>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::client::ClientSettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::client::ClientSettings>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::http::HttpBody> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::http::HttpBody>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::http::HttpHeaders> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::http::HttpHeaders>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::client::TlsSettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::client::TlsSettings>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::client::TlsVersion> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::client::TlsVersion>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<(String, String)>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<(String, String)>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for (crate::api::http_types::HttpHeaderName, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::http_types::HttpHeaderName>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, crate::api::http::MultipartItem) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crate::api::http::MultipartItem>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crate::api::error::RhttpError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::error::RhttpError::RhttpCancelError(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::RhttpError::RhttpTimeoutError(field0) => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::error::RhttpError::RhttpStatusCodeError(field0, field1, field2, field3) => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(field0, serializer);
                <u16>::sse_encode(field1, serializer);
                <Vec<(String, String)>>::sse_encode(field2, serializer);
                <crate::api::http::HttpResponseBody>::sse_encode(field3, serializer);
            }
            crate::api::error::RhttpError::RhttpInvalidCertificateError(field0, field1) => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(field0, serializer);
                <String>::sse_encode(field1, serializer);
            }
            crate::api::error::RhttpError::RhttpInvalidClientError => {
                <i32>::sse_encode(4, serializer);
            }
            crate::api::error::RhttpError::RhttpUnknownError(field0) => {
                <i32>::sse_encode(5, serializer);
                <String>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::client::TlsSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.verify_certificates, serializer);
        <Option<crate::api::client::TlsVersion>>::sse_encode(self.min_tls_version, serializer);
        <Option<crate::api::client::TlsVersion>>::sse_encode(self.max_tls_version, serializer);
    }
}

impl SseEncode for crate::api::client::TlsVersion {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::client::TlsVersion::Tls1_2 => 0,
                crate::api::client::TlsVersion::Tls1_3 => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // Generated by `flutter_rust_bridge`@ 2.1.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // Generated by `flutter_rust_bridge`@ 2.1.0.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();
}
#[cfg(target_family = "wasm")]
pub use web::*;
